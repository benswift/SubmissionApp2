.row
  #content.col-md-9
    %h1#assignment-name.page-header{"assignment-id" => @assignment.id}
      = @assignment.name
      .menu-icon-container.hidden
        %span.glyphicon.glyphicon-tasks.menu-icon
    %p.bold Submission Instructions
    %p.italic
      Assignment for #{link_to @course.code + ": " + @course.name, course_path(@course.id)}
    - if @assignment.due_date
      %p
        .alert.alert-warning{:style => "font-weight: 600"}
          %span.glyphicon.glyphicon-time>
          Due at #{@assignment.due_date.strftime('%d/%m/%Y %I:%M%p')}
    %p= @assignment.description
    
    - if !@assignment.submissions.empty? && current_user.is_staff?
      - if @assignment.submissions.group("strftime('%Y%m%d %H', created_at)").length > 1
        %h3 Graphs
        .spinner#chart-spinner
          .double-bounce1
          .double-bounce2
        .charts
          %canvas#chart{width: "800", height: "200"}
          %canvas#daily-chart{width: "800", height: "150"}
          .pie-charts
            .pie-chart
              %canvas#submissions-chart{width: "150", height: "150"}
              .legend#submissions-chart-legend
            .pie-chart
              %canvas#comments-chart{width: "150", height: "150"}
              .legend#comments-chart-legend
      
      %h3 Submissions by group
      .spinner#groups-spinner
        .double-bounce1
        .double-bounce2
      %table.table.table-hover.table-striped#group-data
        %tr
          %th Group
          %th Tutor
          %th Finalised submissions
          %th Unique submissions

    - if current_user.is_admin_or_convenor?
      %h3 Extensions
      %table.table.table-hover.table-striped
        %tr
          %th Uni ID
          %th Name
          %th Extended Due Date
          %th Delete
        - for extension in @assignment.assignment_extensions
          %tr
            %td= link_to extension.user.uid, user_path(extension.user)
            %td= link_to extension.user.full_name, user_path(extension.user)
            %td= extension.due_date.strftime('%d/%m/%Y %I:%M%p')
            %td
              %a{"data-confirm" => "Are you sure you wish to delete this extension?", "data-method" => "delete", :href => "/assignment_extensions/#{extension.id}", :rel => "nofollow"}
                %span.glyphicon.glyphicon-trash
                Delete

    %h3 Your submissions
    %table.table.table-hover.table-striped
      - if @submissions.empty? && !current_user.is_staff?
        %p
        .alert.alert-danger{:style => "font-weight: 600"}
          %span.glyphicon.glyphicon-warning-sign
          %span You currently have no submissions for this assignment.
        %a{:href => "/submissions/#{@assignment.id.to_s}/new"} New submission
      - else
        %tr
          %th Submitted by
          %th Uni ID
          %th Date submitted
          %th
        - @submissions.each do |s|
          %tr
            %td= link_to s.user.full_name, user_path(s.user)
            %td= link_to s.user.uid, user_path(s.user)
            %td
              - if s.finalised
                = link_to submission_path(s), class: "good" do
                  %p
                    %span.glyphicon.glyphicon-thumbs-up
                    = s.created_at.strftime('%d/%m/%Y %I:%M%p')
                - if is_late_with_extension(s, @assignment)
                  .alert.alert-warning
                    %span.glyphicon.glyphicon-warning-sign
                    Your submission is late, but you have an extension granted until #{@assignment.latest_extension_for(s.user).due_date.strftime('%d/%m/%Y %I:%M%p')}
                - elsif is_late(s, @assignment) || is_late_without_extension(s, @assignment)
                  .alert.alert-danger
                    %span.glyphicon.glyphicon-warning-sign
                    Your submission is late. Unless you have been granted an exception your assignment may not be marked.
              - else
                = link_to submission_path(s) do
                  %p
                    %span.glyphicon.glyphicon-ok
                    = s.created_at.strftime('%d/%m/%Y %I:%M%p')
                - if is_late_with_extension(s, @assignment)
                  .alert.alert-warning
                    %span.glyphicon.glyphicon-warning-sign
                    Your submission is late, but you have an extension granted until #{@assignment.latest_extension_for(s.user).due_date.strftime('%d/%m/%Y %I:%M%p')}
                - elsif is_late(s, @assignment) || is_late_without_extension(s, @assignment)
                  .alert.alert-danger
                    %span.glyphicon.glyphicon-warning-sign
                    Your submission is late. Unless you have been granted an exception your assignment may not be marked.
            %td= link_to "View Submission", submission_path(s), class: "btn btn-sm btn-primary"
    - if current_user.is_staff?
      %h3 All submissions
      %table.table.table-hover.table-striped
        - if @assignment.submissions.empty?
          %p No submissions found.
        - else
          %tr
            %th Submitted by
            %th Uni ID
            %th Date submitted
            %th View submission
            %th Flags
          - @assignment.submissions.each do |s|
            %tr
              %td= link_to s.user.full_name, user_path(s.user)
              %td= link_to s.user.uid, user_path(s.user)
              %td
                = s.created_at.strftime('%d/%m/%Y %I:%M%p')
              %td= link_to "View Submission", submission_path(s)
              %td
                - if is_late_with_extension(s, @assignment)
                  %span.label.label-warning.label-left
                    Extension until #{@assignment.latest_extension_for(s.user).due_date.strftime('%d/%m/%Y %I:%M%p')}
                - elsif is_late(s, @assignment) || is_late_without_extension(s, @assignment)
                  %span.label.label-danger.label-left
                    Late
                - if s.finalised
                  %span.label.label-success.label-left
                    Finalised
                - if @assignment.peer_review_enabled && s.finalised
                  - if s.peer_reviewed?
                    %span.label.label-success.label-left{title: s.peer_review_user_id.nil? ? "No user" : User.find(s.peer_review_user_id).full_name + " (#{User.find(s.peer_review_user_id).uid})", data: {toggle:"tooltip", placement:"bottom"}}
                      Reviewed
                  - elsif !s.peer_reviewed? && !s.peer_review_user_id.nil?
                    %span.label.label-warning.label-left{title: s.peer_review_user_id.nil? ? "No user" : User.find(s.peer_review_user_id).full_name + " (#{User.find(s.peer_review_user_id).uid})", data: {toggle:"tooltip", placement:"bottom"}}
                      Assigned
  = render 'sidebar_show'

-# Chart
- if current_user.is_staff? && (params[:action] == "show" && params[:controller] == "assignments")
  :javascript
    var ready;
    
    function fillArray(value, len) {
      var arr = [];
      for (var i = 0; i < len; i++) {
        arr.push(value);
      }
      return arr;
    }

    ready = function() {
      $(".label").tooltip();
      var assignment_id, ctx, options;
      ctx = $("#chart").get(0).getContext("2d");
      ctx_daily = $("#daily-chart").get(0).getContext("2d");
      ctx_submissions = $("#submissions-chart").get(0).getContext("2d");
      ctx_comments = $("#comments-chart").get(0).getContext("2d");
      assignment_id = $("#assignment-name").attr("assignment-id");
      $.get("/assignments/data/" + assignment_id, function(data) {
        var chart, chartdata, date, dates, k, l, labels, values, _i, _len;
        
        // Hourly data
        labels = [];
        values = [];
        for (k in data.hourly_data) {
          labels.push(k);
          values.push(data.hourly_data[k]);
        }
        dates = [];
        for (_i = 0, _len = labels.length; _i < _len; _i++) {
          l = labels[_i];
          date = Date.parseExact(l, 'yyyMMdd HH');
          dates.push(date.getDate() + "/" + (date.getMonth()+1) + " " + date.getHours() + ":00");
        }
        
        // Daily data
        daily_labels = [];
        daily_values = [];
        for (k in data.daily_data) {
          daily_labels.push(k);
          daily_values.push(data.daily_data[k]);
        }
        daily_dates = [];
        for (_i = 0, _len = daily_labels.length; _i < _len; _i++) {
          l = daily_labels[_i];
          date = Date.parseExact(l+" 00", 'yyyMMdd HH');
          daily_dates.push((parseInt(date.getDate())+1).toString() + "/" + (date.getMonth()+1));
        }
        
        chartdata = {
          labels: dates,
          datasets: [
            {
              label: "Submissions by hour",
              fillColor: "rgba(151,187,205,0.2)",
              strokeColor: "rgba(151,187,205,1)",
              pointColor: "rgba(151,187,205,1)",
              pointStrokeColor: "#fff",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(151,187,205,1)",
              data: values
            }
          ]
        };
        
        daily_chartdata = {
          labels: daily_dates,
          datasets: [
            {
              label: "Submissions by day",
              fillColor: "rgba(151,187,205,0.2)",
              strokeColor: "rgba(151,187,205,1)",
              pointColor: "rgba(151,187,205,1)",
              pointStrokeColor: "#fff",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(200,200,200,1)",
              data: daily_values
            }
          ]
        };
        
        var submissions_data = [
          {
            value: parseInt(data.finalised),
            color: "rgb(63,171,114)",
            highlight: "rgba(63,171,114,0.8)",
            label: "Finalised"
          },
          {
            value: parseInt(data.notfinalised),
            color: "#46BFBD",
            highlight: "#5AD3D1",
            label: "Not finalised"
          },
          {
            value: parseInt(data.nonsubmissions),
            color: "#F7464A",
            highlight: "#FF5A5E",
            label: "No submission"
        }]
        
        var comments_data = [
          {
            value: parseInt(data.commented_submissions),
            color: "rgb(63,171,114)",
            highlight: "rgba(63,171,114,0.8)",
            label: "Commented"
          },
          {
            value: parseInt(data.uncommented_submissions),
            color: "#46BFBD",
            highlight: "#5AD3D1",
            label: "Uncommented"
          }]
        
        var xlabeln = Math.round(dates.length / 4);
        options = {
          scaleShowGridLines: true,
          showXLabels: xlabeln,
          scaleGridLineColor: "rgba(0,0,0,.05)",
          scaleGridLineWidth: 0.5,
          bezierCurve: true,
          bezierCurveTension: 0.4,
          pointDot: true,
          pointDotRadius: 2,
          pointDotStrokeWidth: 1,
          pointHitDetectionRadius: 1,
          datasetStroke: true,
          datasetStrokeWidth: 2,
          datasetFill: true
        };
        baroptions = {
          scaleBeginAtZero : true,
          scaleShowGridLines : true,
          scaleGridLineColor : "rgba(0,0,0,.05)",
          scaleGridLineWidth : 1,
          scaleShowHorizontalLines: true,
          scaleShowVerticalLines: true,
          barShowStroke : true,
          barStrokeWidth : 2,
          barValueSpacing : 5,
          barDatasetSpacing : 1,
        };
        pieoptions= {
            segmentShowStroke : true,
            segmentStrokeColor : "#fff",
            segmentStrokeWidth : 2,
            percentageInnerCutout : 50,
            animationSteps : 100,
            animationEasing : "easeOutBounce",
            animateRotate : true,
            animateScale : false,
            legendTemplate : "<ul class=\"chart-legend\"><% for (var i=0; i<segments.length; i++){%><li><div class=\"legend-square\" style=\"background-color:<%=segments[i].fillColor%>\"></div><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
        };
        
        chart = new Chart(ctx).Line(chartdata, options);
        daily_chart = new Chart(ctx_daily).Bar(daily_chartdata, baroptions);
        submissions_chart = new Chart(ctx_submissions).Doughnut(submissions_data,pieoptions);
        comments_chart = new Chart(ctx_comments).Doughnut(comments_data,pieoptions);
        var submissions_chart_legend = submissions_chart.generateLegend();
        var comments_chart_legend = comments_chart.generateLegend();
        $("#submissions-chart-legend").append(submissions_chart_legend);
        $("#comments-chart-legend").append(comments_chart_legend);
        $("#chart-spinner").addClass("hidden");
        $(".charts").height("auto");
      });
      
      $.get("/assignments/group_data/"+assignment_id, function(data){
        for (var group in data.data) {
          var group_data = data.data[group]
          var group_url = group_data["group_url"]
          var group_submissions_url = group_data["group_submissions_url"]
          $("#group-data").append(
            '<tr><td><a href='+group_url+'>'+group_data.name+'</a></td>'+
            '<td><a href='+group_url+'>'+group_data.tutor+'</a></td>'+
            '<td><a href='+group_submissions_url+'>'+group_data.finalised+' of '+group_data.enrolled+'</a></td>'+
            '<td><a href='+group_submissions_url+'>'+group_data.submissions+' of '+group_data.enrolled+'</a></td>'+
            '</tr>'
          );
        }
        $("#groups-spinner").addClass("hidden");
        $("#group-data").fadeIn(300);
      });
    };

    $(document).ready(ready);
    $(document).on('page:load', ready);